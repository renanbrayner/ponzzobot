import {
  SlashCommandBuilder,
  EmbedBuilder,
  Colors,
  ChatInputCommandInteraction,
} from "discord.js";
import { SlashCommand } from "./types";
import { getVoiceConnection } from "@discordjs/voice";
import { playLeroLeroAudio } from "../voice/audio";

export const leroLeroCommand: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName("lerolero")
    .setDescription("Toca um √°udio aleat√≥rio de lero-lero no canal de voz")
    .setDefaultMemberPermissions(0) // Qualquer um pode usar
    .setDMPermission(false) // Apenas em servidores
    .toJSON(),

  async execute(interaction: ChatInputCommandInteraction) {
    // Verificar se o membro est√° em um canal de voz
    const voiceChannel = (interaction.member as any)?.voice?.channel;

    if (!voiceChannel) {
      const embed = new EmbedBuilder()
        .setColor(Colors.Red)
        .setTitle("üîá Voc√™ n√£o est√° em um canal de voz")
        .setDescription(
          "Voc√™ precisa estar em um canal de voz para usar este comando."
        )
        .setTimestamp();

      await interaction.reply({ embeds: [embed], ephemeral: true });
      return;
    }

    // Verificar se o bot est√° conectado
    const existing = getVoiceConnection(interaction.guildId!);
    if (!existing) {
      const embed = new EmbedBuilder()
        .setColor(Colors.Red)
        .setTitle("üîä N√£o estou conectado")
        .setDescription(
          "Eu preciso estar em um canal de voz para tocar √°udios. Use `/entrar` primeiro."
        )
        .setTimestamp();

      await interaction.reply({ embeds: [embed], ephemeral: true });
      return;
    }

    // Verificar se o bot est√° no mesmo canal
    const botChannelId = existing.joinConfig.channelId;
    if (botChannelId !== voiceChannel.id) {
      const embed = new EmbedBuilder()
        .setColor(Colors.Yellow)
        .setTitle("‚ö†Ô∏è Estamos em canais diferentes")
        .setDescription(
          `Voc√™ est√° em **${voiceChannel.name}** mas eu estou em **${interaction.guild?.channels.cache.get(botChannelId!)?.name || "outro canal"}**.`
        )
        .setTimestamp();

      await interaction.reply({ embeds: [embed], ephemeral: true });
      return;
    }

    // Tentar tocar o √°udio
    try {
      await interaction.deferReply(); // Resposta deferida para opera√ß√µes r√°pidas

      console.log(`[slash-lerolero] Tocando lero-lero por ${interaction.user.username}`);

      playLeroLeroAudio(interaction.guild!);

      const embed = new EmbedBuilder()
        .setColor(Colors.Green)
        .setTitle("üéµ Tocando lero-lero!")
        .setDescription(
          `√Åudio aleat√≥rio de lero-lero tocando em **${voiceChannel.name}**\n\n` +
          `Use \`/sair\` para me desconectar.`
        )
        .addFields(
          { name: "üîß Tipo de comando", value: "Slash Command `/lerolero`", inline: true },
          { name: "üë• Usu√°rio", value: interaction.user.username, inline: true }
        )
        .setTimestamp()
        .setFooter({
          text: "Bot de Kick por Inatividade",
          iconURL: interaction.client.user?.displayAvatarURL(),
        });

      await interaction.editReply({ embeds: [embed] });

      console.log(
        `[slash-lerolero] √Åudio de lero-lero tocado por ${interaction.user.username} em ${voiceChannel.name}`
      );

    } catch (error) {
      console.error("[slash-lerolero] Erro ao tocar √°udio:", error);

      const embed = new EmbedBuilder()
        .setColor(Colors.Red)
        .setTitle("‚ùå Erro ao tocar √°udio")
        .setDescription(
          "N√£o foi poss√≠vel tocar o √°udio de lero-lero. Tente novamente."
        )
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });
    }
  },
};